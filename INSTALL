Installing with Ansible
-----------------------

This document pertains to installing the necessary prerequisites with
Ansible.

NOTE: software manually downloaded by the playbooks is never
updated. This includes:

- aws-cli tools
- wal-g

When preparing to deploy to a new server, as a rule of thumb, creating
a new environment for a new server takes about 15 minutes, depending
on experience. The installation process itself will usually take at
least 1 hour, depending on network and cpu speed, as it involves
installing many packages, some of which are compiled. In total,
reserve 1+ hour, preferably 2 hours for an install from scratch.

Bugs
----

There is something wrong with the ruby installation, ruby, bundler
etc. are not always found when SSH:ing. This can usually be fixed
by logging out and logging in again.

Good to know
------------

1. UFW is not setup because of an Ubuntu bug:
   * https://bugs.launchpad.net/ubuntu/+source/ufw/+bug/1921350

   * it is highly recommended you set up a firewall,
     unless you have already done so

2. /etc/systemd/system/sidekiq.service may require modification,
   see notes in INSTALL-2

Preliminaries
-------------

On the client machine (e.g. computer used for development):

Install Python and Pip:

sudo apt-get install python3-pip

Install Ansible:

pip3 install ansible

Adding a new environment
------------------------

0. Add a DNS record for the host, for setting up SSL

1. Create a copy of 'example', say 'staging', changing
ansible_host, ansible_user and so on appropriately:

rails ansible_host=IP_OR_HOST ansible_user=USERNAME env_name=ENVIRONMENT ETC ETC

The complete list of variables to be set is in 'example', but
for reference:

ansible_host = ip or hostname of server'
ansible_user = which user ansible will be
env_name = the name of the environment (e.g. 'example' or 'staging')
nginx_server_name = servername set in nginx.conf (e.g. www.host.com)
certbot_domains = comma-separated list of domains to get SSL certs for
(e.g. host.com,www.host.com)
admin_email = email address of server admin
rails_env = rails environment
web_concurrency = rails concurrency (puma)
bundler_version = bundler version (should be same as in Gemfile)
ruby_version = ruby version (should be same as in Gemfile)

Test the environment:

ansible -i ENVIRONMENT --private-key PATH_TO_KEY_FILE -m ping rails

Should produce a message similar to:

rails | SUCCESS => {
    "ansible_facts": {
        "discovered_interpreter_python": "/usr/bin/python3"
    },
    "changed": false,
    "ping": "pong"
}

2. Create an SSH key for the admin user for the environment:

Locally, run:

ssh-keygen -t rsa -b 4096 -C "you@address.com"

Put the key in envs/ENVIRONMENT/ENVIRONMENT.key (ENVIRONMENT.key.pub is also created)

Add the key to your keyring:

eval "$(ssh-agent -s)"
ssh-add -K envs/ENVIRONMENT/ENVIRONMENT.key

3. Create an AWS CLI profile for doing backups:

Create the files:

envs/ENVIRONMENT/ENVIRONMENT.aws-cli.config
envs/ENVIRONMENT/ansible/ENVIRONMENT.aws-cli.credentials

You can copy the contents from an existing server,
or simply run (locally):

aws configure --profile backup

You can then copy the files from ~/.aws/config
and ~/.aws/credentials.

4. Create a new Postgres backup configuration:

Create a file called envs/ENVIRONMENT/ENVIRONMENT.pg_backup_config.sh

The contents should be in the format described in INSTALL-2.
Easiest option is probably to copy and modify an existing file.

5. Scripts that need changing

- tools/redis-s3-backup.sh
  * take new environment into account

Running playbooks
-----------------

Run a playbook using:

ansible-playbook -i ENVIRONMENT --private-key PATH_TO_KEY_FILE PLAYBOOK

where PLAYBOOK is the playbook in ansible/

The playbooks are:

 - site.yml
 - site2.yml

Both should be run before attempting to deploy Rails to the server
with e.g. Capistrano or Mina, and site.yml should be run before
site2.yml.

Installing everything on a new server
-------------------------------------

Setting up a brand new server. This assumes you have configured the
environment file as specified in "Adding a new environment". If the
server is not firewalled, consider setting up UFW manually before
proceeding with Ansible, you should allow ports 22, 80 and 443 and
disallow all other ports.

After this, setup is very simple. Run the following command
sequentially:

ansible-playbook -i ENVIRONMENT --private-key PATH_TO_SSH_KEY site.yml
ansible-playbook -i ENVIRONMENT --private-key PATH_TO_SSH_KEY site2.yml

The environment is now properly setup, the next step is to configure
app deployment.
