# Nginx configuration for Nginx + Puma setup

# this sets the user nginx will run as,
# and the number of worker processes
user root root;
worker_processes 1;

# setup where nginx will log errors to
# and where the nginx process id resides
error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

# Regex compilation...
pcre_jit on;

events {
  worker_connections  1024;
  multi_accept on;
  # set accept_mutex to on if you have more than 1 worker_processes
  accept_mutex off;
}

http {
  server_tokens off;

  include /etc/nginx/mime.types;

  default_type application/octet-stream;
  access_log /tmp/nginx.access.log combined;
  error_log /var/log/nginx/error.log;

  # use kernel sendfile
  sendfile on;
  # TCP_CORK, optimizes TCP packet size
  tcp_nopush on;
  # send multiple buffers as individual packets.
  tcp_nodelay on;

  # Timeout values

  # The following are 60s by default
  send_timeout 30s;
  client_body_timeout 30s;
  client_header_timeout 30s;
  # Keepalive timeout is 75s by default
  keepalive_timeout 45;

  # Increase client header buffer size from 1k to 2k.
  # In practice, the headers are usually slightly larger than 1k (measured)
  client_header_buffer_size 2k;

  gzip on;
  gzip_vary on;
  gzip_min_length 500;

  gzip_disable "MSIE [1-6]\.(?!.*SV1)";
  gzip_types text/plain text/xml text/css
     text/comma-separated-values application/javascript
     text/javascript application/x-javascript application/json
     application/atom+xml image/x-icon image/svg+xml;

  # use the socket we configured in our puma.rb
  upstream puma_server {
    server unix:/var/run/puma/puma.sock fail_timeout=0;
  }

  # SSL cache
  ssl_session_cache builtin shared:SSL:20m;
  ssl_session_timeout 10m;

  # configure the virtual host(s), only https now

  # Redirect all http traffic to https
  server {
    listen         80;
    server_name    {{nginx_server_name}};
    return         301 https://$server_name$request_uri;
  }

  # HTTPS
  server {
    # A lot of this is from: https://bjornjohansen.no/optimizing-https-nginx

    # SSL, and also enable HTTP/2
    listen 443 http2 ssl default;

    # SSL settings, the cert files are in /etc/ssl/
    # ssl on; # For older version of Nginx

    ssl_certificate /etc/letsencrypt/live/{{nginx_server_name}}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{nginx_server_name}}/privkey.pem;

    # Use HSTS to prevent MITM attacks, since we only use https
    add_header Strict-Transport-Security "max-age=31536000" always;

    # SSL stapling
    resolver                   8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid=300s;
    resolver_timeout           10s;
    ssl_stapling               on;
    ssl_stapling_verify        on;
    ssl_trusted_certificate /etc/letsencrypt/live/{{nginx_server_name}}/chain.pem;

    # Specify protocols explicitly (only these protocols are supported, disables SSL3).
    # Also disables TLS v1.0 and v.1.1 (updated September 2020).
    ssl_protocols             TLSv1.2 TLSv1.3;

    # SSL hardening
    ssl_dhparam /etc/nginx/cert/dhparam.pem;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

    # replace with your domain name
    server_name {{nginx_server_name}};
    root {{app_directory}}/current/public;

    # maximum accepted body size of client request
    client_max_body_size 1G;

    # Enable caching of file metadata
    open_file_cache          max=10000 inactive=5m;
    open_file_cache_valid    2m;
    open_file_cache_min_uses 1;

    try_files $request_uri @app;

    # The rails app, running on puma master
    location @app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      # this helps Rack set the proper URL scheme for doing HTTPS redirects:
      proxy_set_header X-Forwarded-Proto $scheme;

      proxy_redirect off;
      # pass to the upstream puma server mentioned above
      proxy_pass http://puma_server;
    }

    # respond to OPTIONS with 501 Not implemented
    location / {
      if ($request_method = 'OPTIONS') {
        return 501;
      }
      try_files $request_uri @app;
    }

    # Serve assets via nginx
    location ~ ^/(assets)/  {
      root {{app_directory}}/current/public;
      gzip_static on;
      expires max;
      add_header Cache-Control public;
      access_log off;
    }

    # Serve vite assets via nginx
    location ~ ^/(vite)/  {
      root {{app_directory}}/current/public;
      gzip_static on;
      expires max;
      add_header Cache-Control public;
      access_log off;
    }

    # Serve packs via nginx
    location ~ ^/(packs)/  {
      root {{app_directory}}/current/public;
      gzip_static on;
      expires max;
      add_header Cache-Control public;
      access_log off;
    }

    # Serve robots.txt with Disallow everything via nginx for non-production.
    # Production robots.txt is served from rails public/ directory
    {% if disallow_robots == 'yes' %}
    location = /robots.txt {
      add_header Content-Type text/plain;
      return 200 "User-agent: *\nDisallow: /\n";
    }
    {% endif %}

    location ~* \.(jpg|jpeg|gif|png|bmp|ico|xml|img|txt)$ {
      root {{app_directory}}/current/public;
      gzip_static on;
      expires 7d;
      add_header Cache-Control public;
      access_log off;
    }

    # "block" hacking attempts
    location ~ (\.php$|\.aspx$|\.asp$|\.htm$|\.yaml$|\.yml$) {
      return 404;
    }
  }
}
