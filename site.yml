# ansible/site.yml

---
- hosts: rails
  remote_user: root
  become: true

  tasks:

    - name: Upgrade all packages to the latest version
      apt:
        upgrade: true
        update_cache: true

    - name: Make sure we have a 'wheel' group
      group:
        name: wheel
        state: present

    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Create "admin" user (with sudo)
      user:
        name: admin
        groups: wheel
        append: true
        state: present
        createhome: true
        shell: /bin/bash

    - name: Set up authorized keys for the admin user
      authorized_key: user=admin key="{{item}}"
      with_file:
        - "envs/{{env_name}}/id_ed25519.pub"

    # https://github.com/camptocamp/puppet-accounts/issues/35
    - name: Fix SSH passwordless login for admin user
      shell: |
        usermod -p '*' admin

    - name: Set timezone
      community.general.timezone:
        name: "{{timezone}}"

    - name: Install prerequisite packages (commonly used dependencies)
      apt:
        name: ['build-essential',
               'libgmp3-dev',
               'curl',
               'nodejs',
               'postgresql',
               'postgresql-server-dev-14',
               'libpq-dev',
               'python3-psycopg2',
               'redis',
               'imagemagick',
               'libmagickwand-dev',
               'gnupg2',
               'ca-certificates',
               'lsb-release',
               'unzip',
               'wget',
               'apt-transport-https',
               'acl',
               'git']

    - name: Download RVM
      get_url:
        url: https://get.rvm.io
        dest: /home/admin/rvm.sh
      become: true
      become_user: admin
      become_method: sudo

    - name: Install RVM
      ansible.builtin.command: /bin/bash /home/admin/rvm.sh
      become: true
      become_user: admin
      become_method: sudo

    - name: Install Ruby
      shell: |
        cd /home/admin
        source ~/.rvm/scripts/rvm
        /home/admin/.rvm/bin/rvm install {{ruby_version}}
      become: true
      become_user: admin
      become_method: sudo

    - name: Set default Ruby
      command: /home/admin/.rvm/bin/rvm alias create default ruby-{{ruby_version}}
      become: true
      become_user: admin
      become_method: sudo

    - name: Install bundler
      command: "sudo -iu admin gem install bundler:{{bundler_version}}"

    - name: Install Node from nodesource.com
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_19.x | bash -
        apt update
        apt install -y nodejs

    - name: Install Yarn from yarnpkg.com
      shell: |
        curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
        echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
        apt update
        apt install yarn

    - name: Install Nginx from nginx.org
      shell: |
        echo "deb http://nginx.org/packages/ubuntu `lsb_release -cs` nginx" | tee /etc/apt/sources.list.d/nginx.list
        tee /etc/apt/preferences.d/99nginx << END
        Package: *
        Pin: origin nginx.org
        Pin: release o=nginx
        Pin-Priority: 900
        END
        curl -o /tmp/nginx_signing.key https://nginx.org/keys/nginx_signing.key
        mv /tmp/nginx_signing.key /etc/apt/trusted.gpg.d/nginx_signing.asc
        apt update
        apt install nginx

    - name: Configure ImageMagick policy.xml
      copy:
        src: "configs/policy.xml"
        dest: /etc/ImageMagick-6/policy.xml
        owner: root
        group: root
        mode: u+rw,g-wx,o-wx

    - name: Install Redis server + tools
      apt:
        name: ['redis-server', 'redis-tools']
        update_cache: true

    - name: Configure Redis (1)
      shell: |
        redis-cli config set appendonly yes

    - name: Configure Redis (2)
      ansible.builtin.lineinfile:
        path: /etc/redis/redis.conf
        regexp: '^appendonly '
        insertafter: '^#appendonly '
        line: appendonly yes

    - name: Configure Redis (3)
      ansible.builtin.lineinfile:
        path: /etc/redis/redis.conf
        regexp: '^maxmemory-policy '
        insertafter: '^# maxmemory-policy '
        line: maxmemory-policy noeviction

    - name: Install Fail2Ban
      apt:
        name: ['fail2ban']
        update_cache: true

    - name: Configure Fail2Ban
      template:
        src: templates/jail.local.j2
        dest: /etc/fail2ban/jail.local
        mode: "u=rw,g=r,o=r"

    - name: Enable and start Fail2Ban
      shell: |
        systemctl enable --now fail2ban

    # UFW does not always work: https://bugs.launchpad.net/ubuntu/+source/ufw/+bug/1921350
    # - name: Configure UFW
    #   shell: |
    #     ufw enable
    #     ufw allow 22
    #     ufw allow 80
    #     ufw allow 443

    - name: Configure Limits (1)
      ansible.builtin.lineinfile:
        path: /etc/sysctl.conf
        regexp: '^fs.file-max '
        insertafter: '^#fs.file-max '
        line: fs.file-max = 65536

    - name: Configure Limits (2)
      community.general.pam_limits: "domain=* limit_type={{item.limit_type}} limit_item={{item.limit_item}} value={{item.value}}"
      with_items:
        - {limit_type: "soft", limit_item: "nproc", value: 65535}
        - {limit_type: "hard", limit_item: "nproc", value: 65535}
        - {limit_type: "soft", limit_item: "nofile", value: 65535}
        - {limit_type: "hard", limit_item: "nofile", value: 65535}

    - name: Set up Sidekiq as service
      template:
        src: templates/sidekiq.service.j2
        dest: /etc/systemd/system/sidekiq.service
        mode: "u=rw,g=r,o=r"

    - name: Add Crontab for restarting sidekiq
      ansible.builtin.cron:
        name: "Restart Sidekiq"
        minute: "0"
        hour: "15"
        job: "/bin/systemctl restart sidekiq"

    - name: Enable Sidekiq service
      shell: |
        systemctl daemon-reload
        systemctl enable sidekiq

    # - name: Configure pg_hba.conf
    #   ansible.builtin.lineinfile:
    #     path: /etc/postgresql/14/main/pg_hba.conf
    #     regexp: '^local(\s+)all(\s+)postgres'
    #     insertafter: '^#local(\s+)all(\s+)postgres'
    #     line: local all postgres md5

    # - name: Restart postgresql
    #   shell: |
    #       service postgresql restart

    - name: Configure pg_hba.conf
      ansible.builtin.lineinfile:
        path: /etc/postgresql/14/main/pg_hba.conf
        regexp: '^local(\s+)all(\s+)all(\s+)([a-z]+)'
        insertafter: '^#local(\s+)all(\s+)all(\s+)([a-z]+)'
        line: local all all md5

    - name: Restart postgresql
      shell: |
        service postgresql restart

    - name: Create rails DB user with privileges
      postgresql_user:
        name: "{{rails_db_username}}"
        password: "{{rails_db_password}}"
        role_attr_flags: CREATEDB
      become: true
      become_user: postgres

    - name: Configure log rotation
      template:
        src: templates/rails_logrotate.j2
        dest: /etc/logrotate.d/rails_logrotate
        mode: "u=rw,g=r,o=r"

    - name: Configure systemd journaling
      ansible.builtin.lineinfile:
        path: /etc/systemd/journald.conf
        regexp: '^SystemMaxUse='
        insertbefore: '^#SystemMaxUse='
        line: SystemMaxUse=1G

    - name: Configure systemd journaling (2)
      shell: |
        systemctl restart systemd-journald

    - name: Configure Nginx
      template:
        src: templates/nginx.conf.j2
        dest: /etc/nginx/nginx.conf
        mode: "u=rw,g=r,o=r"

    - name: Setup Certbot with Nginx (1)
      apt:
        name: ['certbot', 'python3-certbot-nginx']
        update_cache: true

    - name: Setup Certbot with Nginx (2)
      shell: |
        if [ ! -e /etc/letsencrypt/live/HAVECERTS ]; then
          service nginx stop
          mkdir -p /etc/nginx/cert
          openssl dhparam -out /etc/nginx/cert/dhparam.pem 2048
          certbot certonly --standalone --staple-ocsp -d "{{certbot_domains}}" -m {{admin_email}} --agree-tos --eff-email --manual-public-ip-logging-ok --force-renewal
          touch /etc/letsencrypt/live/HAVECERTS
          service nginx start
        else
          true
        fi

    - name: Setup app dirs
      template:
        src: "templates/create-app-dirs.service.j2"
        dest: /etc/systemd/system/create-app-dirs.service
        owner: root
        group: root
        mode: u+rw,g-wx,o-wx

    - name: Setup app dirs (2)
      template:
        src: "templates/create-app-dirs.sh.j2"
        dest: /usr/local/bin/create-app-dirs.sh
        owner: root
        group: root
        mode: u+rwx,g-w,o-w

    - name: Setup app dirs (3)
      shell: |
        /usr/local/bin/create-app-dirs.sh

    - name: Setup environment variables for running Rails
      blockinfile:
        dest: "/home/admin/rails-env-variables"
        block: |
          export RAILS_ENV={{rails_env}}
          export RAILS_MASTER_KEY={{rails_master_key}}
          export RAILS_DATABASE_PASSWORD={{rails_db_password}}
          {{additional_rails_variables}}
        marker: '# {mark} ANSIBLE MANAGED BLOCK'
        insertbefore: BOF
        mode: u+rw,g-rw,o-rw
        owner: admin
        group: admin
        create: true

    - name: Setup environment variables for running Rails (2)
      blockinfile:
        dest: "/home/admin/.bash_profile"
        block: |
          [[ -s "$HOME/rails-env-variables" ]] && source "$HOME/rails-env-variables"
        marker: '# {mark} ANSIBLE MANAGED BLOCK'
        insertbefore: BOF
        owner: admin
        group: admin
        create: true

    # - name: Make sudo preserve Rails environment
    #   lineinfile:
    #     path: /etc/sudoers
    #     state: present
    #     regexp: '^Defaults(\s+)env_keep'
    #     insertafter: '^Defaults(\s+)env_reset'
    #     line: 'Defaults        env_keep += "RAILS_ENV WEB_CONCURRENCY RAILS_MASTER_KEY RAILS_DATABASE_PASSWORD"'
    #     validate: '/usr/sbin/visudo -cf %s'

    - name: Setup Puma as service
      template:
        src: templates/puma.service.j2
        dest: /etc/systemd/system/puma.service
        mode: "u=rw,g=r,o=r"

    - name: Enable puma service
      shell: |
        systemctl daemon-reload
        systemctl enable puma
