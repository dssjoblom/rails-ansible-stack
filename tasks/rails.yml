---
- name: Create rails DB user with privileges
  postgresql_user:
    name: "{{rails_db_username}}"
    password: "{{rails_db_password}}"
    role_attr_flags: CREATEDB
  become: true
  become_user: postgres

- name: Configure log rotation
  template:
    src: templates/rails_logrotate.j2
    dest: /etc/logrotate.d/rails_logrotate
    mode: "u=rw,g=r,o=r"

- name: Setup app dirs
  template:
    src: "templates/create-app-dirs.service.j2"
    dest: /etc/systemd/system/create-app-dirs.service
    owner: root
    group: root
    mode: u+rw,g-wx,o-wx

- name: Setup app dirs (2)
  template:
    src: "templates/create-app-dirs.sh.j2"
    dest: /usr/local/bin/create-app-dirs.sh
    owner: root
    group: root
    mode: u+rwx,g-w,o-w

- name: Setup app dirs (3)
  shell: |
    /usr/local/bin/create-app-dirs.sh

- name: Setup environment variables for running Rails
  blockinfile:
    dest: "/home/appdeployer/rails-env-variables"
    block: |
      export RAILS_ENV={{rails_env}}
      export RAILS_MASTER_KEY={{rails_master_key}}
      export RAILS_DATABASE_PASSWORD={{rails_db_password}}
      {{additional_rails_variables}}
    marker: '# {mark} ANSIBLE MANAGED BLOCK'
    insertbefore: BOF
    mode: u+rw,g-rw,o-rw
    owner: appdeployer
    group: appdeployer
    create: true

- name: Setup environment variables for running Rails (2)
  blockinfile:
    dest: "/home/appdeployer/.bash_profile"
    block: |
      [[ -s "$HOME/rails-env-variables" ]] && source "$HOME/rails-env-variables"
    marker: '# {mark} ANSIBLE MANAGED BLOCK'
    insertbefore: BOF
    owner: appdeployer
    group: appdeployer
    create: true

- name: Setup Puma as service
  template:
    src: templates/puma.service.j2
    dest: /etc/systemd/system/puma.service
    mode: "u=rw,g=r,o=r"

- name: Enable puma service
  shell: |
    systemctl daemon-reload
    systemctl enable puma

- name: Set up Sidekiq as service
  template:
    src: templates/sidekiq.service.j2
    dest: /etc/systemd/system/sidekiq.service
    mode: "u=rw,g=r,o=r"

- name: Add Crontab for restarting sidekiq
  ansible.builtin.cron:
    name: "Restart Sidekiq"
    minute: "0"
    hour: "15"
    job: "/bin/systemctl restart sidekiq"

- name: Enable Sidekiq service
  shell: |
    systemctl daemon-reload
    systemctl enable sidekiq
